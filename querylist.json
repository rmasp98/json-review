{
    "test-regex": {
        "query": "^[a-z]{5}$",
        "description": "Test query for Regex engine",
        "queryType": 0
    },
    "test-expression": {
        "query":"FindNodes(\"[0-9]{3}\", value)",
        "description": "Test query for Expression engine",
        "queryType": 1
    },
    "Secrets-in-ConfigMap": {
        "query": "FindNodes(\"ConfigMap\", Value, output=configmaps) -> FindRelative(configmaps, \"PRIVATE KEY\", 1, 2, Value, output=keys) + FindRelative(keys, \"name\", 2, 2, KEY)",
        "description": "Looks for secrets stored in ConfigMaps such as private keys",
        "queryType": 1
    },
    "NetworkPolicy-by-Namespace": {
        "query": "FindNodes(\"NetworkPolicy\", value, output=np) -> FindRelative(np, \"namespace\", 1, 2, key) + FindRelative(np, \"spec\", 1, 1, key, output=spec) + FindRelative(spec, \".*\", 0, 6)",
        "description": "Shows all network policy rules and which namespace they are assigned to",
        "queryType": 1
    },
    "Overly-Permissive-PSP": {
        "query": "FindNodes(\"PodSecurityPolicy\", value, output=psp) -> FindRelative(psp, \"name\", 1, 2, key) + (FindRelative(psp, \"allowPrivilegeEscalation\", 1, 2, key, output=priv) -> FindRelative(priv, \"true\", 0,0)) + (FindRelative(psp, \"allowedCapabilities\", 1,2,key,output=cap) -> FindRelative(cap, \"\\*\", 0, 1))",
        "description": "Shows any overly permissive settings in all PSPs",
        "queryType": 1
    }
}